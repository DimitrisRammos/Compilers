
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\006\004\000\002\005\004" +
    "\000\002\005\003\000\002\012\005\000\002\012\003\000" +
    "\002\013\005\000\002\013\004\000\002\003\007\000\002" +
    "\004\004\000\002\004\003\000\002\007\013\000\002\007" +
    "\004\000\002\007\005\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\005\000\002\010\003\000" +
    "\002\011\005\000\002\011\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\012\012\007\015\004\016\006\017\011\001" +
    "\002\000\012\012\007\015\004\016\006\017\021\001\002" +
    "\000\030\002\uffee\004\uffee\006\uffee\007\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\001\002" +
    "\000\030\002\ufff0\004\ufff0\006\ufff0\007\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\001\002" +
    "\000\004\005\052\001\002\000\014\002\ufffe\012\007\015" +
    "\004\016\006\017\021\001\002\000\020\002\uffef\004\uffef" +
    "\005\037\012\uffef\015\uffef\016\uffef\017\uffef\001\002\000" +
    "\016\002\ufffb\004\023\012\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\001\002\000\014\002\uffff\012\007\015\004\016\006\017" +
    "\011\001\002\000\004\002\016\001\002\000\014\002\ufff4" +
    "\012\ufff4\015\ufff4\016\ufff4\017\ufff4\001\002\000\004\002" +
    "\000\001\002\000\014\002\001\012\007\015\004\016\006" +
    "\017\021\001\002\000\014\002\ufff5\012\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\001\002\000\032\002\uffef\004\uffef\005\026" +
    "\006\uffef\007\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\017\uffef\001\002\000\016\002\ufffc\004\023" +
    "\012\ufffc\015\ufffc\016\ufffc\017\ufffc\001\002\000\012\012" +
    "\007\015\004\016\006\017\021\001\002\000\030\002\ufff1" +
    "\004\ufff1\006\ufff1\007\ufff1\011\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\016\ufff1\017\ufff1\001\002\000\030\002\ufffd" +
    "\004\ufffd\006\ufffd\007\ufffd\011\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\001\002\000\014\006\027" +
    "\012\007\015\004\016\006\017\021\001\002\000\030\002" +
    "\ufff7\004\ufff7\006\ufff7\007\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\017\ufff7\001\002\000\010\004" +
    "\023\006\031\011\033\001\002\000\030\002\ufff9\004\ufff9" +
    "\006\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\016\ufff9\017\ufff9\001\002\000\030\002\ufff8\004\ufff8" +
    "\006\ufff8\007\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\001\002\000\012\012\007\015\004" +
    "\016\006\017\021\001\002\000\010\004\023\006\031\011" +
    "\033\001\002\000\030\002\ufffa\004\ufffa\006\ufffa\007\ufffa" +
    "\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\001\002\000\004\010\047\001\002\000\014\006\041" +
    "\012\007\015\004\016\006\017\040\001\002\000\012\004" +
    "\uffef\005\026\006\043\011\044\001\002\000\020\002\ufff7" +
    "\004\ufff7\010\uffea\012\ufff7\015\ufff7\016\ufff7\017\ufff7\001" +
    "\002\000\004\010\uffeb\001\002\000\004\010\uffec\001\002" +
    "\000\004\017\045\001\002\000\006\006\043\011\044\001" +
    "\002\000\004\010\uffed\001\002\000\012\012\007\015\004" +
    "\016\006\017\021\001\002\000\006\004\023\007\051\001" +
    "\002\000\014\002\ufff6\012\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\001\002\000\012\012\007\015\004\016\006\017\021\001" +
    "\002\000\006\004\023\014\054\001\002\000\012\012\007" +
    "\015\004\016\006\017\021\001\002\000\006\004\023\006" +
    "\056\001\002\000\012\012\007\015\004\016\006\017\021" +
    "\001\002\000\006\004\023\013\060\001\002\000\012\012" +
    "\007\015\004\016\006\017\021\001\002\000\030\002\ufff3" +
    "\004\023\006\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\001\002\000\030\002\ufff2" +
    "\004\ufff2\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\016\002\013\003\014\004\012\005\007\006" +
    "\004\007\011\001\001\000\006\006\004\007\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\004\007\021\001\001\000\006\011\035\013\024" +
    "\001\001\000\002\001\001\000\012\003\017\005\016\006" +
    "\004\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\004\007\021\001\001\000" +
    "\002\001\001\000\004\013\024\001\001\000\002\001\001" +
    "\000\006\006\004\007\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\004\007\027\001\001\000\002" +
    "\001\001\000\004\012\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\004\007\033\001\001\000\004" +
    "\012\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\004\007\027\001\001\000\006\010\041\013\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\045\001\001\000\002" +
    "\001\001\000\006\006\004\007\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\004\007\052\001\001" +
    "\000\002\001\001\000\006\006\004\007\054\001\001\000" +
    "\002\001\001\000\006\006\004\007\056\001\001\000\002" +
    "\001\001\000\006\006\004\007\060\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }

    public static void print( String str){
        System.out.println(str);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Start ::= FunctionList MainFunction 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String m1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              print("public class Main{");
                              print("\tpublic static void main(String[] args) {\n");

                              print(m1);
                              print("\n\t}\n");

                              print(e2);

                              print("}");

                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Start",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Start ::= FunctionList 
            {
              Object RESULT =null;
		int f2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            print("public class Main{");
                            print("\tpublic static void main(String[] args) {\n");

                            print("\n\t}\n");

                            print(f2);
                            print("}");
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Start",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Start ::= MainFunction 
            {
              Object RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String m1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            print("public class Main{");
                            print("\tpublic static void main(String[] args) {\n");
                            print(m1);

                            print("\n\t}\n");
                            print("}");
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Start",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FunctionCall ::= ID ArgumentListMAIN 
            {
              String RESULT =null;
		int namleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int namright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String nam = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT =  nam + a1 ;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MainFunction ::= MainFunction expr 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = m + "\t\tSystem.out.println(" + f1 + ");\n";
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainFunction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MainFunction ::= expr 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = "\t\tSystem.out.println(" + f1 + ");\n";
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainFunction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ArgumentCallMAIN ::= COM expr ArgumentCallMAIN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = ", " + e + a;
                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentCallMAIN",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ArgumentCallMAIN ::= RPAREN 
            {
              String RESULT =null;
		
                            RESULT = ")";
                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentCallMAIN",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ArgumentListMAIN ::= LPAREN expr ArgumentCallMAIN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = "( " + e + a;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentListMAIN",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ArgumentListMAIN ::= LPAREN RPAREN 
            {
              String RESULT =null;
		
                        RESULT = "()";
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentListMAIN",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FunctionDecl ::= ID ArgumentList LBRUCK expr RBRUCK 
            {
              String RESULT =null;
		int namleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int namright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String nam = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                RESULT = "\tpublic static String " + nam + e1 +  " {\n\t\t" + "return " + e +";\n\t}\n\n";
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FunctionList ::= FunctionList FunctionDecl 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = f1 + f2;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FunctionList ::= FunctionDecl 
            {
              String RESULT =null;
		int f2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = f2;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= IF LPAREN expr PREF expr RPAREN expr ELSE expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = "((" + "("+e1+").startsWith(" + e2 +")" +")" + "?" + "(" + e3 + ")" + ":" + "(" + e4 + "))";
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= REV expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "(new StringBuffer("+e+").reverse().toString())"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr CONCAT expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + " + " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= STRING_LITERAL 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "(\"" + str + "\")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= ID 
            {
              String RESULT =null;
		int namleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int namright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String nam = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = nam; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= FunctionCall 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ArgumentCall ::= COM ID ArgumentCall 
            {
              String RESULT =null;
		int elemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String elem = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ", String " + elem + a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentCall",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ArgumentCall ::= RPAREN 
            {
              String RESULT =null;
		 RESULT = ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentCall",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ArgumentList ::= LPAREN ID ArgumentCall 
            {
              String RESULT =null;
		int elemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String elem = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = "( String " + elem + a;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ArgumentList ::= LPAREN RPAREN 
            {
              String RESULT =null;
		
                        RESULT = "()";
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
